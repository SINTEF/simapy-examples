""" Importing Hydrodynamic Coefficients

This example demonstrates how to use SIMA along with simapy to import hydrodynamic
coefficients from datasets generated by WAMIT. The same approach can be used to import
data from HydroD/WADAM or any other file format which is supported by SIMA.

Before running the example script, make sure that you have an environmental variable
SIMA_DIR which contains the install directory of SIMA.

This example requires SIMA version 4.4.0 or later.
"""
import os
import uuid
from pathlib import Path
import subprocess

from simapy.sima_reader import SIMAReader
from simapy.sima_writer import SIMAWriter
import shutil

SCRIPT_DIR = Path(os.path.realpath(os.path.dirname(__file__)))


def main():
    # Here we use the import_file function defined below to import data from the WAMIT
    # dataset by pointing at the .out-file. The same function could be used to for
    # example to import a G1.SIF file created by HydroD/WADAM as well.
    # The function returns a list of tasks because certain file formats (e.g. stasks)
    # might contain multiple tasks. WAMIT result files only create a single task
    # hence the variable is assigned to the zeroth element of the list.
    task = import_file(SCRIPT_DIR / 'wamit_data' / 'sima.out')[0]

    # After the task has been imported we could do some manipulations to it, add more
    # data and perhaps make SIMA run a simulation with the task. For this example we
    # just export it to a JSON file called imported.json. This file can be imported
    # into SIMA in order to inspect the results.
    SIMAWriter().write([task], 'imported.json')


def import_file(filename):
    """ Import a file of a type supported by SIMA as a list of tasks.

    The function uses an environmental variable SIMA_DIR to locate the SIMA installation,
    make sure it is set before running.
    """
    workspace = Path('./tmp-ws-{}'.format(uuid.uuid1()))
    out_file = 'out.json'
    command_file = workspace / 'commands.dat'

    # Create a temporary workspace folder folder with unique name
    os.makedirs(workspace)

    # Write commands file
    with open(command_file, 'w') as f:
        f.write(f'import file={filename}\n')
        f.write(f'export file={out_file}\n')

    # Run SIMA to import SIF file and export JSON
    try:
        run_sima(workspace, ['--commands', f'file={command_file}'])

        # Import JSON file exported by SIMA
        return SIMAReader().read(workspace / out_file)
    finally:
        # Remove temporary files
        shutil.rmtree(workspace, ignore_errors=True)


def run_sima(workspace: Path, args: list[str]):
    """ Run SIMA with the given workspace directory and command line arguments.

    The function uses an environmental variable SIMA_DIR to locate the SIMA installation,
    make sure it is set before running.
    """
    sima_dir =  os.getenv('SIMA_DIR')
    if not sima_dir:
        raise RuntimeError("SIMA_DIR environmental variable not set")
    if os.name == 'nt':
        sima = sima_dir + '\\' + 'sre.exe'
    else:
        sima = sima_dir + '/' + 'sre'
    cmd = [
        sima,
        '-consoleLog',
        '--progress',
        '-data',
        workspace
    ]
    # Concatenate `args` to argument list
    cmd += args
    res = subprocess.run(cmd)
    if res.returncode != 0:
        raise RuntimeError('SIMA run failed')


if __name__ == '__main__':
    main()
